# 工作流名称
name: 构建Flutter ARM64 SDK

# 触发条件：手动触发
on:
  workflow_dispatch:
    inputs:
      flutter_version:
        description: 'Flutter版本(例如:3.19.3)'
        default: 'stable'
        required: true
      channel:
        description: 'Flutter通道(stable/beta/dev/master)'
        default: 'stable'
        required: true

jobs:
  build-flutter-sdk:
    # 使用Ubuntu最新版本作为构建环境
    runs-on: ubuntu-latest
    
    steps:
      # 安装必要的依赖
      - name: 释放磁盘空间
        run: |
          # 清理系统以释放大量空间
          echo "正在释放磁盘空间..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache
          sudo apt-get remove --purge -y '^dotnet-.*' '^llvm-.*' 'php.*' '^mongodb-.*' '^mysql-.*' azure-cli google-chrome-stable firefox powershell
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          # 显示可用空间
          echo "可用磁盘空间："
          df -h

      # 安装基础依赖
      - name: 安装基础依赖
        run: |
          # 只安装最基础的构建依赖
          sudo apt-get update
          sudo apt-get install -y curl git unzip

      # 下载精简版Flutter SDK
      - name: 下载Flutter SDK
        run: |
          # 直接下载官方Flutter SDK，而不是克隆仓库
          FLUTTER_STORAGE_BASE_URL=https://storage.googleapis.com
          FLUTTER_VERSION="${{ github.event.inputs.flutter_version }}"
          
          if [[ "$FLUTTER_VERSION" == "stable" || "$FLUTTER_VERSION" == "beta" || "$FLUTTER_VERSION" == "dev" || "$FLUTTER_VERSION" == "master" ]]; then
            CHANNEL=$FLUTTER_VERSION
          else
            CHANNEL="${{ github.event.inputs.channel }}"
          fi
          
          echo "下载 Flutter SDK ($CHANNEL 通道)..."
          curl -L -o flutter.tar.xz https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.19.3-stable.tar.xz
          
          echo "解压 Flutter SDK..."
          mkdir -p flutter_temp
          tar xf flutter.tar.xz -C flutter_temp
          mv flutter_temp/flutter flutter-sdk
          rm -rf flutter_temp flutter.tar.xz
          
          # 裁剪Flutter SDK，仅保留必要组件
          cd flutter-sdk
          echo "裁剪 Flutter SDK 大小..."
          rm -rf .git
          rm -rf dev
          rm -rf examples
          
          # 只保留Android平台支持，移除其他平台
          bin/flutter config --no-analytics
          bin/flutter precache --android --no-ios --no-linux --no-macos --no-windows --no-fuchsia
          
          # 显示Flutter版本
          echo "Flutter 版本信息:"
          bin/flutter --version

      # 获取ARM64版本的Dart SDK
      - name: 获取ARM64版本的Dart SDK
        run: |
          cd flutter-sdk
          
          # 获取Flutter使用的Dart版本
          DART_VERSION=$(bin/flutter --version | grep -oE "Dart [0-9]+\.[0-9]+\.[0-9]+" | cut -d' ' -f2)
          echo "需要的Dart版本: $DART_VERSION"
          
          # 下载ARM64版本的Dart SDK
          echo "下载ARM64版本的Dart SDK..."
          mkdir -p temp_dart
          cd temp_dart
          curl -L -o dart-sdk.zip https://storage.googleapis.com/dart-archive/channels/stable/release/$DART_VERSION/sdk/dartsdk-linux-arm64-release.zip
          
          # 解压并替换
          echo "替换为ARM64版本的Dart SDK..."
          unzip -q dart-sdk.zip
          cd ..
          rm -rf bin/cache/dart-sdk
          mkdir -p bin/cache/dart-sdk
          cp -r temp_dart/dart-sdk/* bin/cache/dart-sdk/
          rm -rf temp_dart

      # 获取预编译的gen_snapshot工具
      - name: 获取预编译的gen_snapshot工具
        run: |
          echo "准备获取预编译的gen_snapshot工具..."
          
          # 创建目录结构
          mkdir -p flutter-sdk/bin/cache/artifacts/engine/android-arm64-release/linux-arm64
          mkdir -p flutter-sdk/bin/cache/artifacts/engine/android-arm-release/linux-arm64
          mkdir -p flutter-sdk/bin/cache/artifacts/engine/android-x64-release/linux-arm64
          
          # 下载预编译的gen_snapshot工具
          # 注：这里使用来自Flutter Tizen项目的预编译工具
          echo "下载预编译的gen_snapshot工具..."
          
          curl -L -o arm64_gen_snapshot https://raw.githubusercontent.com/flutter-tizen/engine-binaries/master/linux-arm64/gen_snapshot
          chmod +x arm64_gen_snapshot
          
          # 复制到所有需要的位置
          cp arm64_gen_snapshot flutter-sdk/bin/cache/artifacts/engine/android-arm64-release/linux-arm64/gen_snapshot
          cp arm64_gen_snapshot flutter-sdk/bin/cache/artifacts/engine/android-arm-release/linux-arm64/gen_snapshot
          cp arm64_gen_snapshot flutter-sdk/bin/cache/artifacts/engine/android-x64-release/linux-arm64/gen_snapshot
          
          rm arm64_gen_snapshot

      # 创建自定义README文件
      - name: 创建说明文件
        run: |
          cat > flutter-sdk/README_ARM64.md << 'EOF'
          # Flutter ARM64 SDK

          这是针对Linux ARM64平台优化的Flutter SDK。

          ## 特性

          - 包含ARM64版本的Dart SDK
          - 包含针对Android构建的ARM64版本gen_snapshot工具
          - 适用于Linux ARM64 (aarch64)开发环境

          ## 使用方法

          1. 解压此SDK到您选择的目录
          2. 将bin目录添加到PATH环境变量：
             ```
             export PATH="$PATH:您的解压路径/flutter-sdk/bin"
             ```
          3. 运行`flutter doctor`检查环境设置

          ## 注意

          此SDK经过修改，适用于ARM64架构的Linux系统，解决了在ARM64平台上无法构建发布版APK的问题。
          EOF

      # 打包SDK
      - name: 打包Flutter ARM64 SDK
        run: |
          # 获取正确的SDK版本号
          SDK_VERSION=$(cd flutter-sdk && bin/flutter --version | head -n 1 | awk '{print $2}')
          echo "打包Flutter SDK版本: $SDK_VERSION"
          
          # 打包整个SDK
          tar -czf flutter-sdk-linux-arm64-${SDK_VERSION}.tar.gz flutter-sdk

      # 上传构建产物
      - name: 上传Flutter ARM64 SDK
        uses: actions/upload-artifact@v4
        with:
          name: flutter-sdk-linux-arm64
          path: flutter-sdk-linux-arm64-*.tar.gz
          retention-days: 30
