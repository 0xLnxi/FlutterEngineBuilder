# 工作流名称
name: 构建Flutter引擎

# 触发条件：手动触发
on:
  workflow_dispatch:
    inputs:
      engine_version:
        description: 'Flutter引擎版本(分支名或提交哈希)'
        default: 'main'
        required: true

jobs:
  build-engine:
    # 使用Ubuntu最新版本作为构建环境
    runs-on: ubuntu-latest
    
    steps:
      # 释放磁盘空间
      - name: 释放磁盘空间
        run: |
          # 清理系统以释放空间
          echo "正在释放磁盘空间..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache
          sudo apt-get remove --purge -y '^dotnet-.*' '^llvm-.*' 'php.*' '^mongodb-.*' '^mysql-.*' azure-cli google-chrome-stable firefox powershell
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          # 显示可用空间
          echo "可用磁盘空间："
          df -h

      # 安装必要的依赖
      - name: 安装构建依赖
        run: |
          # 安装编译引擎所需的软件包
          sudo apt-get update
          sudo apt-get install -y wget curl git python3 python3-pip cmake ninja-build clang lld
          pip install setuptools wheel six

      # 下载depot_tools并准备构建Flutter引擎
      - name: 准备构建环境
        run: |
          # 创建工作目录
          mkdir -p engine_minimal
          cd engine_minimal
          
          # 下载depot_tools
          echo "下载depot_tools..."
          git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH="$PATH:$(pwd)/depot_tools"
          
          # 创建最小化的.gclient文件
          echo "配置最小化的.gclient文件..."
          cat > .gclient << 'EOF'
          solutions = [
            {
              "name": "src/flutter",
              "url": "https://github.com/flutter/engine.git",
              "deps_file": "DEPS",
              "managed": False,
              "custom_deps": {
                # 排除不必要的大型依赖
                "src/third_party/android_tools": None,
                "src/third_party/googletest/src": None,
                "src/fuchsia": None,
                "src/fuchsia/sdk/linux": None,
              },
              "custom_vars": {
                # 禁用不必要的组件
                "build_with_chromium": False,
                "download_android_deps": False,
                "download_windows_deps": False,
              },
            },
          ]
          EOF
          
          # 下载Flutter引擎源码
          echo "下载Flutter引擎源码..."
          mkdir -p src
          cd src
          git clone --depth=1 https://github.com/flutter/engine.git flutter
          cd flutter
          git checkout ${{ github.event.inputs.engine_version }} || git checkout main
          
          # 展示目录结构以便调试
          echo "检查目录结构..."
          find . -maxdepth 2 -type d
          find ./tools -type f | grep -i gn || echo "未找到gn脚本"
          
          # 修改DEPS文件以排除大型依赖
          echo "修改DEPS文件以优化空间..."
          sed -i '/fuchsia_sdk_root/d' DEPS

      # 同步依赖（使用优化选项）
      - name: 同步引擎依赖
        run: |
          cd engine_minimal
          export PATH="$PATH:$(pwd)/depot_tools"
          
          # 使用最小化选项同步
          echo "同步引擎依赖（优化版）..."
          gclient sync --no-history --shallow --nohooks --deps=minimum -R
          
          # 显示剩余空间
          echo "同步后的磁盘空间："
          df -h

      # 构建Android版gen_snapshot工具
      - name: 构建gen_snapshot工具
        run: |
          cd engine_minimal/src/flutter
          export PATH="$PATH:$(cd ../.. && pwd)/depot_tools"
          
          # 检查gn工具参数
          echo "检查gn工具参数..."
          ./tools/gn --help | grep -i android-cpu
          
          # 正确配置gn构建（修正参数格式）
          echo "配置ARM64构建（修正参数）..."
          # 使用正确的参数格式
          ./tools/gn --runtime-mode=release --android --no-goma --android-cpu=arm64 --no-lto
          
          # 编译gen_snapshot工具
          echo "开始编译gen_snapshot..."
          cd ../..
          ninja -C src/flutter/out/android_release gen_snapshot
          
          # 创建输出目录
          mkdir -p /tmp/engine_output/android-arm64-release/linux-arm64
          
          # 查找并复制gen_snapshot工具到输出目录
          echo "查找gen_snapshot工具..."
          find src/flutter/out -name "gen_snapshot" -type f -exec ls -la {} \;
          find src/flutter/out -name "gen_snapshot" -type f -exec cp {} /tmp/engine_output/android-arm64-release/linux-arm64/ \;
          
          # 检查是否成功复制
          if [ -f "/tmp/engine_output/android-arm64-release/linux-arm64/gen_snapshot" ]; then
            echo "成功生成gen_snapshot工具"
            ls -la /tmp/engine_output/android-arm64-release/linux-arm64/
          else
            echo "未找到gen_snapshot工具，构建可能失败"
            exit 1
          fi

      # 打包gen_snapshot工具
      - name: 打包gen_snapshot工具
        run: |
          # 创建说明文件
          cat > /tmp/engine_output/README.md << EOF
          # Flutter 引擎工具 (ARM64版本)

          此压缩包包含用于Linux ARM64平台的Flutter引擎工具。

          ## 目录结构

          该压缩包包含以下文件:
          - android-arm64-release/linux-arm64/gen_snapshot: 用于ARM64平台的代码生成工具

          ## 使用方法

          将文件复制到Flutter SDK的对应目录:
          ```bash
          cp android-arm64-release/linux-arm64/gen_snapshot 您的Flutter路径/bin/cache/artifacts/engine/android-arm64-release/linux-arm64/
          ```

          ## 版本信息

          引擎版本: ${{ github.event.inputs.engine_version }}
          构建时间: $(date '+%Y-%m-%d %H:%M:%S')
          EOF
          
          # 打包工具
          cd /tmp
          tar -czf flutter-engine-arm64.tar.gz engine_output/

      # 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: flutter-engine-arm64
          path: /tmp/flutter-engine-arm64.tar.gz
          retention-days: 7
